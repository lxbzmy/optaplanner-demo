package cn.devit.demo.planner
dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import cn.devit.planner.PlaneLegConstraint;
import cn.devit.planner.Plane;
import cn.devit.planner.Leg;
import cn.devit.planner.FlightPlan;
import cn.devit.planner.FlightLeg;
import cn.devit.planner.constraints.Effect;
import cn.devit.planner.constraints.Weather;
import cn.devit.planner.Airport
import cn.devit.planner.constraints.AirportCloseTime
import cn.devit.planner.Edge.EdgeType
import cn.devit.planner.Edge

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// 硬性规则
// ############################################################################
/*
/*
rule "测试"
    when
        $flight : FlightLeg(plane !=null,id == 2 )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end
*/
/* 常理 */
rule "前后时间顺序不能乱"
    when
        $f1: FlightLeg(plane !=null, $arrivalDateTime: arrivalDateTime)
        $f2: FlightLeg(plane !=null,previousLeg ==$f1, departureDateTime <= $arrivalDateTime)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1000000);
end
/*TODO 这个规则可能会导致不能取消。
TODO 台风影响的飞机能够提前
TODO 空飞，调机
TODO 拉直？？？
*/
/*取消以后剩余的航段必须连续，否则需要补充空飞航段*/
rule "航站衔接"
    when
        $left: FlightLeg(plane !=null, $p2 : leg.arrival )
        $right: FlightLeg(previousLeg ==$left,leg.departure != $p2)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end

rule "飞机需要停留50分钟才能起飞"
    when
        $flight:FlightLeg(plane !=null, stayMinutesBeforeDeparture <50 ,changed == true)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

/**
 * 延误条件，分国内国际
 * TODO 只有受到台风影响才能提前
*/
rule "国内航班最多延误,24h]"
    when
        $flight : FlightLeg(crossBorder ==false,plane !=null,
            1440 < delayMinutes              
        )
    then
        //System.out.println($flight.getId());
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "国际航班时间变动条件是[0,36h]"
    when
        $flight : FlightLeg(crossBorder ==true,plane !=null,
            (delayMinutes < 0 ||  2160 < delayMinutes)             
        )
    then
        //System.out.println($flight.getId());
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


rule "换飞机时指定飞机不能飞指定航段"
    when
        $vol:PlaneLegConstraint($leg:leg ,$plane:plane )
        $flight : FlightLeg(leg==$leg,plane==$plane)
    then
        //System.out.println($flight.getId());
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/**
 * 有些机场有关闭时间段
*/

rule "机场关闭时不能起飞"
    when
        $flight : FlightLeg($leg: leg,plane!=null, 
            $departureDate : departureDate ,
            $departureTime : departureTime 
        )
        AirportCloseTime( airport == $leg.departure,
            validFrom <= $departureDate,$departureDate<= validThru,
            closeTime < $departureTime,$departureTime < openTime
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end

rule "机场关闭时不能降落"
    when
        $flight : FlightLeg($leg: leg,plane!= null, 
            $arrivalDate : arrivalDate,
            $arrivalTime : arrivalTime
        )
        AirportCloseTime(airport == $leg.arrival,
            validFrom <= $arrivalDate,$arrivalDate<= validThru,
            closeTime < $arrivalTime,$arrivalTime < openTime
            
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end

/**
 *=====
 * 台风
 *
*/
rule "台风不能离港"
    when
        $weather :Weather($airport: airport ,affect == Effect.departure)
        $leg: Leg(departure ==$airport )
        $flight: FlightLeg(plane !=null,leg ==$leg, 
            $weather.form <= departureDateTime && departureDateTime <= $weather.thru)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1000);
end

rule "没有台风不能提前离港"
    when
        $flight : FlightLeg(crossBorder ==false,plane !=null,
            delayMinutes<0,
            $airport :leg.departure,
            $scheduleDepartureDateTime : schedule.departureDateTime
            )
        not ( exists 
            Weather(airport == $airport ,affect == Effect.departure,
                form <= $scheduleDepartureDateTime && $scheduleDepartureDateTime <= thru
            ) 
        )   
    then
        //System.out.println($flight.getId());
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end
rule "被台风影响离港的国内航班允许提前起飞[6,0]"
    when
        $flight : FlightLeg(crossBorder ==false,plane !=null,
            delayMinutes<-360,
            $airport :leg.departure,
            $scheduleDepartureDateTime : schedule.departureDateTime
         )
         Weather(airport == $airport,affect == Effect.departure,
                form <= $scheduleDepartureDateTime && $scheduleDepartureDateTime <= thru
            )
    then
        //System.out.println($flight.getId());
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "台风不能落地"
    when
        $weather :Weather( $airport: airport ,affect == Effect.arrival)
        $leg: Leg(arrival == $airport )
        $flight: FlightLeg(plane !=null,leg ==$leg, 
            $weather.form<= arrivalDateTime && arrivalDateTime <= $weather.thru)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1000);
end

rule "台风停机不能在台风之前落地然后等台风过了离港"
    when
        $weather :Weather( $airport: airport ,affect == Effect.parking)
        $leg: Leg(arrival == $airport)
        $flight: FlightLeg(plane !=null,leg ==$leg,arrivalDateTime<= $weather.form) 
        $next : FlightLeg(plane !=null,previousLeg == $flight, 
            $weather.thru <= departureDateTime)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1000);
end

/**
 * 边界的航段只接受时间调整和换飞机，不接受取消，空飞。
*/
rule "右边界不能取消或者空飞"
    when 
        $flight : FlightLeg(plane ==null)
        $right: Edge(type == EdgeType.right, this contains $flight )
    then 
        scoreHolder.addHardConstraintMatch(kcontext, -10000);    
end
//TODO "左边界不能改变机场"





/**
* 分数优化条件，soft 约束
* 取消一个航班
*/
rule "取消一个航班值1000"
    when 
        $flight : FlightLeg(previousLeg !=null,plane ==null)
    then 
        scoreHolder.addSoftConstraintMatch(kcontext, -1000);    
end

rule "延误时间"
    when 
        $flight : FlightLeg(plane !=null, delayMinutes >0,$delay :delayMinutes )
    then 
        scoreHolder.addSoftConstraintMatch(kcontext, -100 * $delay/60);    
end